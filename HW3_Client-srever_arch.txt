HW
Client_Server
1) Прочиать про клиент-серверную архитектур
Клиент-серверная архитектура отражает взаимодетвие 
между клиентом/клиентами с сервером/серверами и 
базой/базами данных через определённые протоколы
Клиент-серверная архитектура - это некоторое ПО, 
которое расположено на разных вычислительных машинах.
 клиент-серверная архитектура бывает:
 - одноуровневой (1-Tier): клиент - база данных 
 (может иметь проблемы с синхронизацией информации
 - двухуровневой (2-Tier): клиент - сервер(все данные 
 хранятся на сервере, если сервер упадёт или 
 перезагрузится - информация будет утеряна, всё что 
 было в памяти стирается при выключении системы.
 - многоуровневой(n-Tier): клиент - сервер - база 
 данных (позволяет делать быстрые выборки инфы и 
 сохранять инфу при рестарте системы.
При выходе из строя 1го звена (либо сервера, либо 
базы) - система перестаёт работать до момента 
восстановления звена. Во избежание таких ситуаций 
может быть использован кластер серверов/баз данных, 
который работает при помощи балансировщика 
(перераспределяет нагрузку с сервера на сервер/с 
базы на базу данных).

ВИДЫ СЕТЕВЫХ ПРОТОКОЛОВ (выучить)
TCP – протокол для установки качественного соединения между 2 устройствами, передачи данных и верификации их получения.
IP – прооткол отвечает за корректность доставки сообщений по выбранному адресу. При этом информация делится на пакеты, которые могут поставляться по-разному.
MAC – по нему происходит процесс верификации сетевых устройств. Все устройства, которые подключены к сети Интернет, содержат свой оригинальный MAC-адрес.
ICMP – протокол, который ответственен за обмен данными, но не используется для процесса передачи информации.
UDP – протокол, управляющий передачей данных, но данные не проходят верификацию при получении. Этот протокол функционирует быстрее, чем протокол TCP.
HTTP – протокол для передачи информации (гипертекста), на базе которого функционируют все сегодняшние сайты. В его возможности входит процесс запрашивания необходимых данных у виртуально удаленной системы (файлы, веб-страницы и прочее).
FTP – протокол передачи информации из особого файлового сервера на ПК конечного пользователя.
POP3 – классический протокол простого почтового соединения, который ответственен за передачу почты.
SMTP – вид протокола, который может устанавливать правила для передачи виртуальной почты. Он ответственен за передачу и верификацию доставки, а также оповещения о возможных ошибках.

2) Что ткое HTTP и HTTPS
HTTP – протокол для передачи информации (гипертекста), на базе которого функционируют все сайты.
HTTPS - то же самое, только передаваемые данные шифруются (более безопасный метод, Данные в протоколе HTTPS передаются поверх криптографических протоколов SSL или TLS).

3) HTTP методы:
GET - получение ресурса
POST - создание ресурса
PUT - обновление ресурса
DELETE - удаление ресурса
Методов больше 4х, также спецификация протокола HTTP не обязывает сервер понимать все методы передачи, обязательным является только GET.
Сервер может давать свои специальные ответы на оставшиеся методы (кроме GET).

4) HTTP статус коды сервера
Статус код сервера - это ответ сервера из 3х цифр. Первая определяет класс ответа, а две другие - конкретно ответ.
Есть 5 основных кодов ответа сервера:
1** - Информационный, запрос успешно получен и идёт обработка
2** - Успешное выполнение, запрос был успешно получен, понят и принят.
3** - Перенаправление, последующие действия должны быть предприняты для выполнения запроса.
4** - Ошибка на стороне клиента, запрос содержит синтаксическую ошибку, либо не корректен.
5** - Ошибка на стороне сервера, сервер не может выполнить обработать корректный запрос.

5) Что такое ядро браузера
Браузер = оболочка + ядро
Ядро - это программа или модуль, который отображает контент на основе языка разметки.
6) Какие браузеры какиие ядра используют
IE - Trident
Mozilla Firefox - Gecko
Opera - Presto, впоследствии Опера пенрешла на ядро ​​Google Chrome Blink +V8
Safari - Webkit (прототип ядра Chrome)
Google Chrome - Blink + V8
Яндекс - Blink

7) Что такое API
Application Programming interface - программный интерфейс приложения.
API - это составляющая часть сервера, которая получает запросы и отправляет ответыю
- специальный протокол для взаимодействия программ, который позволяет использовать функции одного приложения внутри другого.
Когда компания предлагает своим пользователям готовый API - это значит, что она создала ряд специальных URL, которые в качестве ответа возвращают только данные.

8. Что такое ендпоинты
Endpoint - работает как шлюз, соединяя серверные процессы приложения с внешним интерфейсом.
 - это определённые URL-адреса, на которые отправляется сообщения.

9) URL (URI, URL, URN)
Рассмотрим https://www.youtube.com/watch?v=00z-6hyIvG0
URI - https://www.youtube.com/watch?v=00z-6hyIvG0
URL - https://www.youtube.com
URN - www.youtube.com/watch?v=00z-6hyIvG0

10) Идемпотентные HTTP методы
Идемпотентный метод - когда результат от одного запроса на сервер такой же как и от нескольких идентичных запросов.
GET
DELETE
PUT
HEAD
OPTIONS
TRACE

11) Безопасные HTTP методы
Безопасный метод - когда он не еняет состояние сервера (операции типа "только чтение").
GET
HEAD
OPTIONS
TRACE

12) Иденфикация, Аутентификация, Авторизация
Идентификация - проверка на существование пользователя по логину
Аутентификация - проверка правильости вводимого пароля
Авторизация - процесс загрузки пользовательского интерфейса программы согласно прав, присвоенных клиенту.

13) Что такое IP
Уникальный числовой идентификатор устройста в компьютерной сети (идентификатор сетевого узла)
Разница между MAC и IP: физический адрес (мас) это идентификатор сетевого адаптера, а IP адрес - идентификатор сетевого узла.
MAC адрес нужен для передачи данных, IP адрес для маршрутизации той же самой передачи.

14) Что такое октеты в DNS
DNS - Domain Name System
то технология, которая позволяет браузеру найти запрошенный пользователем сайт по его имени.
Каждому цифровому IP-адресу присваивается понятное буквенное имя (домен).
При запросе пользователем имени сайта DNS-системой преобразует его в IP-адрес и пользователь попадает на старницу сайта.

1 Октет = 8 бит

15) Что такое порт, сколько портов у Linux сервера
Порт - это своего рода канал для связи между отправителем и получателем запроса/информации,
портов будет 2 и более (как минимум порт отправителя, порт получателя).
Каждый порт уникален и может служить для определённого процесса, к примеру:
80 порт - HTTP
443 - HTTPS
1433 - порт SQL
Linux-сервер может поддерживать > 65тыс. соединений

16) Уровни OSI
1 уровень. Физический (physical). Единицей нагрузки (PDU) здесь является бит. Кроме единиц и нулей физический уровень не знает ничего. На этом уровне работают провода, патч панели, сетевые концентраторы (хабы, которые сейчас уже сложно найти в привычных нам сетях), сетевые адаптеры. Именно сетевые адаптеры и ничего более из компьютера. Сам сетевой адаптер принимает последовательность бит и передает её дальше.

2 уровень. Канальный (data link). PDU - кадр (frame). На этом уровне появляется адресация. Адресом является MAC адрес. Канальный уровень ответственен за доставку кадров адресату и их целостность. В привычных нам сетях на канальном уровне работает протокол ARP. Адресация второго уровня работает только в пределах одного сетевого сегмента и ничего не знает о маршрутизации - этим занимается вышестоящий уровень. Соответственно, устройства, работающие на L2 - коммутаторы, мосты и драйвер сетевого адаптера.

3 уровень. Сетевой (network). PDU пакет (packet). Наиболее распространенным протоколом (дальше не буду говорить про “наиболее распространенный” - статья для новичков и с экзотикой они, как правило,  не сталкиваются) тут является IP. Адресация происходит по IP-адресам, которые состоят из 32 битов. Протокол маршрутизируемый, то есть пакет способен попасть в любую часть сети через какое-то количество маршрутизаторов. На L3 работают маршрутизаторы.

4 уровень. Транспортный (transport). PDU сегмент (segment)/датаграмма (datagram). На этом уровне появляются понятия портов. Тут трудятся TCP и UDP. Протоколы этого уровня отвечают за прямую связь между приложениями и за надежность доставки информации. Например, TCP умеет запрашивать повтор передачи данных в случае, если данные приняты неверно или не все. Так же TCP может менять скорость передачи данных, если сторона приема не успевает принять всё (TCP Window Size).

Следующие уровни “правильно” реализованы лишь в RFC. На практике же, протоколы описанные на следующих уровнях работают одновременно на нескольких уровнях модели OSI, поэтому нет четкого разделения на сеансовый и представительский уровни. В связи с этим в настоящее время основным используемым стеком является TCP/IP, о котором поговорим чуть ниже.

5 уровень. Сеансовый (session). PDU данные (data). Управляет сеансом связи, обменом информации, правами. Протоколы - L2TP, PPTP.

6 уровень. Представительский (presentation). PDU данные (data). Преставление и шифрование данных. JPEG, ASCII, MPEG.

7 уровень. Прикладной (application). PDU данные (data). Самый многочисленный и разнообразный уровень. На нем выполняются все высокоуровненвые протоколы. Такие как POP, SMTP, RDP, HTTP и т.д. Протоколы здесь не должны задумываться о маршрутизации или гарантии доставки информации - этим занимаются нижестоящие уровни. На 7 уровне необходима лишь реализации конкретных действий, например получение html-кода или email-сообщения конкретному адресату.

17) Хедеры http запросов
это заголовки HTTP запросов и ответов
они несут информацию о браузере клиента, запрошенной странице, сервере и многом другом.
Первая строка - это «Строка состояния», за которой следуют «HTTP-заголовки», до пустой строки. После этого начинается «содержимое» (в данном случае - HTML вывод).